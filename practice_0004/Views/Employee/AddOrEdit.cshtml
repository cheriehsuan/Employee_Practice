@model practice_0004.ModelView.EmployeeModelView



@{
    ViewBag.Title = "AddOrEdit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@section JavaScript
{
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
}

@if (TempData["message"] != null)
{
    <script type="text/javascript">
        var message = @Html.Raw(Json.Encode(TempData["message"]));
        alert(message);
    </script>
}

<script type="text/javascript">
    $(function () {
        /*$('#age').css('color', 'red');*/
        //if (!$("#Emp_id").val())
        //    $("#button").val('Create');
        //else {
        //    $("#button").val('Save');
        //    $('#Emp_id').prop('readonly', 'readonly');
        //}


        var list = $('#ddlPublisherItems').val().split(';');
        $("#pub_id").val(list[0]);
        $('#City').val(list[1]);
        $('#Country').val(list[3]);

        $('#Emp_id').css('ime-mode', 'disabled');

        $("#age, #salary").keypress(function (e) {
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
       

        $('#ddlPublisherItems').change(function () {
            var list = $('#ddlPublisherItems').val().split(';');
            $("#pub_id").val(list[0]);
            $('#City').val(list[1]);
            $('#Country').val(list[3]);
        });

        $('.datepicker').datepicker({
            format: 'yyyy/mm/dd',
            autoclose: true
        });

        var type = @Html.Raw(Json.Encode(Session["type"]));
        if (type === 'V') {
            $('#Emp_id').prop('disabled', 'disabled');
            $('#FName').prop('disabled', 'disabled');
            $('#LName').prop('disabled', 'disabled');
            $('#age').prop('disabled', 'disabled');
            $('#BirthDay').prop('disabled', 'disabled');
            $('#Address').prop('disabled', 'disabled');
            $('#Hire_date').prop('disabled', 'disabled');
            $('#salary').prop('disabled', 'disabled');
            $('#ddlPublisherItems').prop('disabled', 'disabled');
            $('#button').prop('type', 'hidden');
        } else if (type === 'A') {
            $("#button").val('Create');
        } else if (type === 'U') {
            $("#button").val('Save');
            $('#Emp_id').prop('readonly', 'readonly');
        }
        
    });

</script>

<style type="text/css">
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>基本資料</h4>
        <hr />
        @*<div class="form-group">
                @Html.LabelFor(model => model.Emp_ID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Emp_ID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Emp_ID, "", new { @class = "text-danger" })
                </div>
            </div>*@
        @Html.HiddenFor(model => model.EmployeeList.pub_id, new { @id = "pub_id", Value = @Model.EmployeeList.pub_id })

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.Emp_ID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.Emp_ID, new { htmlAttributes = new { @id = "Emp_id", @class = "form-control", @maxlength = "9", @onpaste = "return false", @ondragenter = "return false", @oncontextmenu = "return false" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.Emp_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.FName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.FName, new { htmlAttributes = new { @id = "FName", @class = "form-control", @maxlength = "50" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.FName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.LName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.LName, new { htmlAttributes = new { @id = "LName", @class = "form-control", @maxlength = "50" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.LName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.Age, new { htmlAttributes = new { @id = "age", @class = "form-control", @type = "number" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.BirthDay, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.BirthDay, new { htmlAttributes = new { @id = "BirthDay", @class = "form-control datepicker", @Value = @Model.EmployeeList.BirthDay.ToString("yyyy/MM/dd"), @maxlength = "10" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.BirthDay, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.Address, new { htmlAttributes = new { @id = "Address", @class = "form-control", @maxlength = "100" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.Hire_date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.Hire_date, new { htmlAttributes = new { @id = "Hire_date", @class = "form-control datepicker", @maxlength = "10" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.Hire_date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.salary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.salary, new { htmlAttributes = new { @id = "salary", @class = "form-control", @type = "number" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.salary, "", new { @class = "text-danger" })
            </div>
        </div>

        <h4>出版社</h4>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.Pub_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PublisherItems, Model.PublisherItems, new { @id = "ddlPublisherItems", @class = "form-control" })
                @*@Html.EditorFor(model => model.EmployeeList.Pub_Name, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.EmployeeList.Pub_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.City, new { htmlAttributes = new { @id = "City", @class = "form-control", disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeList.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeList.Country, new { htmlAttributes = new { @id = "Country", @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.EmployeeList.Country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="button" type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
